{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "b728cd09-e93d-4875-b5dd-bcbf934b9e8b",
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "2025-06-27 11:19:01.241 \n",
      "  \u001b[33m\u001b[1mWarning:\u001b[0m to view this Streamlit app on a browser, run it with the following\n",
      "  command:\n",
      "\n",
      "    streamlit run C:\\Users\\avira\\anaconda3\\Lib\\site-packages\\ipykernel_launcher.py [ARGUMENTS]\n",
      "2025-06-27 11:19:01.244 Session state does not function when running a script without `streamlit run`\n"
     ]
    }
   ],
   "source": [
    "import streamlit as st\n",
    "import numpy as np\n",
    "import pandas as pd\n",
    "import pickle\n",
    "\n",
    "# Load all saved models and encoders\n",
    "model = pickle.load(open(\"XGBRegressor_model.pkl\", \"rb\"))\n",
    "scaler = pickle.load(open(\"scaler.pkl\", \"rb\"))\n",
    "label_encoders = pickle.load(open(\"label_encoders.pkl\", \"rb\"))\n",
    "ohe = pickle.load(open(\"One_Hot_Encoder.pkl\", \"rb\"))\n",
    "\n",
    "# Streamlit App Title\n",
    "st.title(\"ðŸš— Car Price Prediction App\")\n",
    "\n",
    "st.sidebar.header(\"Enter Car Features:\")\n",
    "\n",
    "levy = st.sidebar.number_input(\"Levy\", min_value=0.0, value=900.0)\n",
    "engine_volume = st.sidebar.number_input(\"Engine Volume (L)\", min_value=0.0, value=2.0)\n",
    "mileage = st.sidebar.number_input(\"Mileage (km)\", min_value=0, value=100000)\n",
    "age_of_car = st.sidebar.slider(\"Age of Car (Years)\", min_value=0, max_value=30, value=10)\n",
    "\n",
    "manufacturer = st.sidebar.selectbox(\"Manufacturer\", label_encoders['Manufacturer'].classes_)\n",
    "model_name = st.sidebar.selectbox(\"Model\", label_encoders['Model'].classes_)\n",
    "category = st.sidebar.selectbox(\"Category\", label_encoders['Category'].classes_)\n",
    "fuel_type = st.sidebar.selectbox(\"Fuel Type\", label_encoders['Fuel_type'].classes_)\n",
    "color = st.sidebar.selectbox(\"Color\", label_encoders['Color'].classes_)\n",
    "leather = st.sidebar.selectbox(\"Leather Interior\", ['Yes', 'No'])\n",
    "wheel = st.sidebar.selectbox(\"Wheel\", ['Left wheel', 'Right-hand drive'])\n",
    "\n",
    "gear_type = st.sidebar.selectbox(\"Gear Box Type\", ['Automatic', 'Manual', 'Tiptronic', 'Variator'])\n",
    "drive_wheel = st.sidebar.selectbox(\"Drive Wheel\", ['4x4', 'Front', 'Rear'])\n",
    "\n",
    "cylinders = st.sidebar.slider(\"Cylinders\", min_value=1, max_value=16, value=4)\n",
    "airbags = st.sidebar.slider(\"Airbags\", min_value=0, max_value=16, value=6)\n",
    "\n",
    "# Encode the selected categorical features\n",
    "encoded_inputs = {\n",
    "    'Manufacturer': label_encoders['Manufacturer'].transform([manufacturer])[0],\n",
    "    'Model': label_encoders['Model'].transform([model_name])[0],\n",
    "    'Category': label_encoders['Category'].transform([category])[0],\n",
    "    'Fuel_type': label_encoders['Fuel_type'].transform([fuel_type])[0],\n",
    "    'Color': label_encoders['Color'].transform([color])[0],\n",
    "    'Leather_interior': label_encoders['Leather_interior'].transform([leather])[0],\n",
    "    'Wheel': label_encoders['Wheel'].transform([wheel])[0]\n",
    "}\n",
    "\n",
    "# One-hot encoding for gear box and drive wheels\n",
    "ohe_input = pd.DataFrame([[gear_type, drive_wheel]], columns=['Gear_box_type', 'Drive_wheels'])\n",
    "ohe_transformed = ohe.transform(ohe_input)\n",
    "ohe_df = pd.DataFrame(ohe_transformed, columns=ohe.get_feature_names_out(['Gear_box_type', 'Drive_wheels']))\n",
    "\n",
    "# Final input dataframe\n",
    "input_df = pd.DataFrame([[\n",
    "    levy,\n",
    "    2025 - age_of_car,\n",
    "    engine_volume,\n",
    "    mileage,\n",
    "    cylinders,\n",
    "    airbags,\n",
    "    age_of_car,\n",
    "    encoded_inputs['Manufacturer'],\n",
    "    encoded_inputs['Model'],\n",
    "    encoded_inputs['Category'],\n",
    "    encoded_inputs['Fuel_type'],\n",
    "    encoded_inputs['Color'],\n",
    "    encoded_inputs['Leather_interior'],\n",
    "    encoded_inputs['Wheel']\n",
    "]], columns=[\n",
    "    'Levy', 'Prod_year', 'Engine_volume', 'Mileage', 'Cylinders', 'Airbags',\n",
    "    'Age_of_Car', 'Manufacturer', 'Model', 'Category', 'Fuel_type', 'Color',\n",
    "    'Leather_interior', 'Wheel'\n",
    "])\n",
    "\n",
    "# Combine with one-hot encoded\n",
    "final_input = pd.concat([input_df, ohe_df], axis=1)\n",
    "\n",
    "# Apply scaler\n",
    "final_input[['Levy', 'Engine_volume', 'Mileage', 'Age_of_Car']] = scaler.transform(\n",
    "    final_input[['Levy', 'Engine_volume', 'Mileage', 'Age_of_Car']]\n",
    ")\n",
    "\n",
    "# Predict\n",
    "if st.button(\"Predict Price\"):\n",
    "    price = model.predict(final_input)[0]\n",
    "    st.success(f\"ðŸ’° Predicted Car Price: ${price:,.2f}\")\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "674b403d-8fa6-4763-91fb-325322faccba",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python [conda env:base] *",
   "language": "python",
   "name": "conda-base-py"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.12.7"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
